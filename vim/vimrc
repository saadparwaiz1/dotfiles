" vim: set foldmethod=marker foldlevel=0 nomodeline:
" ================================================================
" Vim Plug {{{
call plug#begin('$XDG_DATA_HOME/nvim/site/pack/packages/opt/')
  Plug 'neoclide/coc.nvim', { 'branch': 'release' }
  Plug 'nvim-lua/completion-nvim', { 'for': [] }
  Plug 'junegunn/fzf.vim'
  Plug 'neovim/nvim-lspconfig', { 'for': [] }
  Plug 'nvim-treesitter/nvim-treesitter', { 'for': [] }
  Plug 'norcalli/snippets.nvim', { 'for': [] }
  Plug 'tpope/vim-commentary'
  Plug 'honza/vim-snippets'
  Plug 'jiangmiao/auto-pairs', { 'for': [] }
call plug#end()
" }}}
" ================================================================
" Set Options {{{
set termguicolors
set autoindent
set autoread
set backspace=indent,eol,start
set complete-=i
set display=lastline
set encoding=utf-8
set formatoptions=tcqj
set history=10000
set hlsearch
set incsearch
set langnoremap
set laststatus=2
set listchars=tab:>\ ,trail:-,nbsp:+
set mouse=a
set nrformats=hex
set sessionoptions-=options
set smarttab
set tabpagemax=50
set tags=./tags;,tags
set ttyfast
set viminfo+=!
set viminfo+='1000,n$HOME/.vim/viminfo
set viewdir=$HOME/.vim/view
set backupdir=$HOME/.vim/backupdir
set directory=$HOME/.vim/swap
set undodir=$HOME/.vim/undo
set wildmenu
set nobackup
set noshowmode
set lazyredraw
set splitbelow
set splitright
set nowritebackup
set termguicolors
set tabstop=2
set shiftwidth=2
set softtabstop=2
set cmdheight=2
set history=100
set expandtab
set updatetime=100
set clipboard=unnamedplus
set path+=**
set shortmess+=c
set completeopt=menuone,noinsert,noselect
set wildignore=*.o,*~,*.pyc,*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store,**/node_modules
set list
set number
set relativenumber
set rtp+=/opt/intel/homebrew/opt/fzf
set signcolumn=number
" }}}
" ================================================================
" Global Variables{{{
let g:mapleader = " "
" }}}
" ================================================================
" Vim Filetype Settings {{{
syntax enable
filetype plugin indent on
colorscheme gruvdark
" }}}
" ================================================================
" Keybindings {{{
  nnoremap <silent> \n <cmd>bn<CR>
  nnoremap <silent> \p <cmd>bp<CR>
  nnoremap <silent> \q <cmd>bd<CR>
  nnoremap <silent> \f <cmd>Files<CR>
  nnoremap <silent> <Down> gj
  nnoremap <silent> <Up> gk
  inoremap <silent> jj <Esc>
  nnoremap <silent> Q <nop>
  nnoremap <silent> <CR> <cmd>nohlsearch<CR><CR>
  inoremap <silent> jk <cmd>wq<CR>
  nnoremap <silent> vv ^v$
  inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "\<TAB>"
  inoremap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<C-h>"
  nmap <silent> <Left> <Plug>(coc-diagnostic-prev)
  nmap <silent> <Right> <Plug>(coc-diagnostic-next)
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
  nnoremap <silent> K <cmd>call <SID>show_documentation()<CR>
  nmap gq  <cmd>call CocAction('format')<CR>
" }}}
" ===============================================================
" Vim Functions {{{
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
" }}}
" ===============================================================
" Vim Autogroups {{{
" ===============================================================
augroup init
  autocmd!
  autocmd CursorHold * silent call CocActionAsync('highlight')
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end
" }}}
" ===============================================================
" Statusline {{{
" ===============================================================
hi link SubStatusLine Visual

" Color Groups
hi StatusLine guifg=#504945 guibg=#ebdbb2 guisp=NONE gui=reverse
hi SubSeperator guifg=#504945 guibg=#665c54 guisp=NONE gui=reverse

" Functions
function! s:HighLight(c)
  execute 'highlight Seperator guifg=#665c54' 'guibg='a:c 'guisp=NONE gui=reverse'
  execute 'highlight Mode guifg=#282828' 'guibg='a:c 'guisp=NONE gui=BOLD'
  execute 'highlight InfoMode guifg='a:c 'guibg=#282828' 'guisp=NONE gui=reverse'
endfunction

function! GetMode()
    let l:mode = mode()
    if l:mode ==# 'n'
        call s:HighLight('#a89984')
        return 'NORMAL'
    elseif l:mode ==# 'i'
        call s:HighLight('#83a598')
        return 'INSERT'
    elseif l:mode ==# 'R'
        call s:HighLight('#8ec07c')
        return 'REPLACE'
    elseif l:mode ==# 'c'
        call s:HighLight('#d3869b')
        return 'COMMAND'
    elseif l:mode ==# 't'
        call s:HighLight('#8ec07c')
        return 'TERMINAL'
    else
        call s:HighLight('#fe8019')
        return 'VISUAL'
    endif
endfunction
set statusline=%#Mode#\ %{GetMode()}\ %#SubStatusLine#\ \ %t\ \ ﬘\ %#StatusLine#%=%y\ \ \ \ %#SubStatusLine#\ \ %{strftime('%T')}\ \ %p%%\ ☰\ %l/%L
" }}}
" ===============================================================
